#include "mapping/function.h"

namespace chaos::mapping {
template <typename Derived>
template <typename OutV, typename... Args>
void function_base<Derived>::_check_val_params(const OutV &val,
                                               const Args &...args) const {
  CHAOS_DEBUG_ASSERT(val.size() == Nx());
}
template <typename Derived>
template <typename OutJ, typename... Args>
void function_base<Derived>::_check_jac_params(const OutJ &jac,
                                               const Args &...args) const {
  CHAOS_DEBUG_ASSERT(jac.cols() == Nx());
  CHAOS_DEBUG_ASSERT(jac.rows() == Nf());
}
template <typename Derived>
template <typename OutH, typename... Args>
void function_base<Derived>::_check_hes_params(const OutH &hes,
                                               const Args &...args) const {
  CHAOS_DEBUG_ASSERT(hes.rows() == Nf());
  CHAOS_DEBUG_ASSERT(hes.cols() == Nx());
}

template <typename Derived>
template <typename Out, typename... Args>
inline void function_base<Derived>::Val(Out &&val, const Args &...args) const {
  //-> check parameter validity.
  _check_val_params(val, args...);
  derived().template _val_jac_hes_impl<details::eval_traits::VAL>(
      &val, nullptr, nullptr, args...);
}

template <typename Derived>
template <typename Out, typename... Args>
inline void function_base<Derived>::Jac(Out &&jac, const Args &...args) const {
  _check_jac_params(jac, args...);
  derived().template _val_jac_hes_impl<details::eval_traits::JAC>(
      nullptr, &jac, nullptr, args...);
}

template <typename Derived>
template <typename Out, typename... Args>
inline void function_base<Derived>::Hes(Out &&hes, const Args &...args) const {
  _check_hes_params(hes, args...);
  derived().template _val_jac_hes_impl<details::eval_traits::HES>(
      nullptr, nullptr, &hes, args...);
}

template <typename Derived>
template <typename OutV, typename OutJ, typename... Args>
inline void function_base<Derived>::ValJac(OutV &&val, OutJ &&jac,
                                           const Args &...args) const {
  _check_val_params(val, args...);
  _check_jac_params(jac, args...);
  derived().template _val_jac_hes_impl<details::eval_traits::VAL_JAC>(
      &val, &jac, nullptr, args...);
}

template <typename Derived>
template <typename OutV, typename OutH, typename... Args>
inline void function_base<Derived>::ValHes(OutV &&val, OutH &&hes,
                                           const Args &...args) const {
  _check_val_params(val, args...);
  _check_hes_params(hes, args...);
  derived().template _val_jac_hes_impl<details::eval_traits::VAL_HES>(
      &val, &hes, nullptr, args...);
}

template <typename Derived>
template <typename OutJ, typename OutH, typename... Args>
inline void function_base<Derived>::JacHes(OutJ &&jac, OutH &&hes,
                                           const Args &...args) const {
  _check_jac_params(jac, args...);
  _check_hes_params(hes, args...);
  derived().template _val_jac_hes_impl<details::eval_traits::JAC_HES>(
      nullptr, &jac, &hes, args...);
}

template <typename Derived>
template <typename OutV, typename OutJ, typename OutH, typename... Args>
inline void function_base<Derived>::ValJacHes(OutV &&val, OutJ &&jac,
                                              OutH &&hes,
                                              const Args &...args) const {
  _check_val_params(val, args...);
  _check_jac_params(jac, args...);
  _check_hes_params(hes, args...);
  derived().template _val_jac_hes_impl<details::eval_traits::VAL_JAC_HES>(
      &val, &jac, &hes, args...);
}
}  // namespace chaos::mapping
